<!-- views/dashboard/categories.ejs -->
<% 
const title = "Catégories - Dashboard MoneyWise";
const pageTitle = "Gestion des catégories";
%>

<!-- Header avec bouton d'ajout -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-8">
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">Gestion des catégories</h1>
        <p class="text-gray-600 dark:text-gray-400 mt-1">Personnalisez vos catégories de transactions</p>
    </div>
    <button id="addCategoryBtn" class="mt-4 sm:mt-0 px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors flex items-center">
        <i class="fas fa-plus mr-2"></i>
        Nouvelle catégorie
    </button>
</div>

<!-- Stats rapides -->
<div class="grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
            <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center mr-4">
                <i class="fas fa-tags text-blue-600 dark:text-blue-400"></i>
            </div>
            <div>
                <p class="text-sm text-gray-600 dark:text-gray-400">Total catégories</p>
                <p id="totalCategories" class="text-2xl font-bold text-gray-900 dark:text-gray-100">12</p>
            </div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
            <div class="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mr-4">
                <i class="fas fa-check-circle text-green-600 dark:text-green-400"></i>
            </div>
            <div>
                <p class="text-sm text-gray-600 dark:text-gray-400">Catégories actives</p>
                <p id="activeCategories" class="text-2xl font-bold text-gray-900 dark:text-gray-100">10</p>
            </div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center">
            <div class="w-12 h-12 bg-orange-100 dark:bg-orange-900/30 rounded-full flex items-center justify-center mr-4">
                <i class="fas fa-user text-orange-600 dark:text-orange-400"></i>
            </div>
            <div>
                <p class="text-sm text-gray-600 dark:text-gray-400">Catégories personnalisées</p>
                <p id="customCategories" class="text-2xl font-bold text-gray-900 dark:text-gray-100">5</p>
            </div>
        </div>
    </div>
</div>

<!-- Filtres -->
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Rechercher</label>
            <div class="relative">
                <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                <input type="text" id="searchCategory" placeholder="Nom de catégorie..."
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
            </div>
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Statut</label>
            <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100">
                <option value="all">Toutes</option>
                <option value="active">Actives</option>
                <option value="inactive">Inactives</option>
            </select>
        </div>
    </div>
</div>

<!-- Liste des catégories -->
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Toutes les catégories</h3>
    </div>

    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Catégorie
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Transactions
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Statut
                    </th>
                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody id="categoriesTableBody" class="divide-y divide-gray-200 dark:divide-gray-700">
                <!-- Les catégories seront insérées ici par JavaScript -->
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Ajouter/Modifier Catégorie -->
<div id="categoryModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen px-4">
        <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>
        <div class="relative bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-lg w-full p-6">
            <div class="flex items-center justify-between mb-6">
                <h3 id="categoryModalTitle" class="text-lg font-semibold text-gray-900 dark:text-gray-100">Nouvelle catégorie</h3>
                <button id="closeCategoryModal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form id="categoryForm" class="space-y-4">
                <input type="hidden" id="categoryId">

                <!-- Icône -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Icône *</label>
                    <div class="grid grid-cols-8 gap-2">
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🍽️">🍽️</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🚗">🚗</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🏠">🏠</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🎭">🎭</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🏥">🏥</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="💼">💼</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🛒">🛒</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="✈️">✈️</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="📚">📚</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="👕">👕</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="📱">📱</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🎮">🎮</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="☕">☕</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="💪">💪</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="🎵">🎵</button>
                        <button type="button" class="cat-icon-btn p-2 border-2 border-gray-300 dark:border-gray-600 rounded-lg hover:border-primary-500 text-xl" data-icon="📦">📦</button>
                    </div>
                    <input type="hidden" id="categoryIcon" name="icon" value="🍽️">
                </div>

                <!-- Nom -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Nom de la catégorie *</label>
                    <input type="text" id="categoryName" name="name" 
                           class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                           placeholder="Ex: Alimentation">
                </div>

                <!-- Description -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</label>
                    <textarea id="categoryDescription" name="description" rows="2"
                              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 resize-none"
                              placeholder="Description optionnelle..."></textarea>
                </div>

                <!-- Statut -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div>
                        <p class="text-sm font-medium text-gray-900 dark:text-gray-100">Activer cette catégorie</p>
                        <p class="text-xs text-gray-600 dark:text-gray-400">La catégorie sera disponible pour vos transactions</p>
                    </div>
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" id="categoryActive" name="active" checked class="sr-only peer">
                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 rounded-full peer dark:bg-gray-600 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary-600"></div>
                    </label>
                </div>

                <!-- Boutons -->
                <div class="flex space-x-4 pt-4">
                    <button type="button" id="cancelCategoryBtn" class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        Annuler
                    </button>
                    <button type="submit" id="submitCategoryBtn" class="flex-1 px-4 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors">
                        Enregistrer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>



// Données fictives des catégories
  const categories = <%- JSON.stringify(categories) %>;
let currentEditingCategory = null;
let selectedIcon = '🍽️';
let filteredCategories = [...categories];


const categoriesTableBody = document.getElementById('categoriesTableBody');
const categoryModal = document.getElementById('categoryModal');
const addCategoryBtn = document.getElementById('addCategoryBtn');
const closeCategoryModal = document.getElementById('closeCategoryModal');
const cancelCategoryBtn = document.getElementById('cancelCategoryBtn');
const categoryForm = document.getElementById('categoryForm');
const searchCategory = document.getElementById('searchCategory');
const statusFilter = document.getElementById('statusFilter');

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    renderCategories();
    updateStats();
    setupCategoryEventListeners();
    setupIconSelection();
    setupFilters();
});

function setupCategoryEventListeners() {
    addCategoryBtn.addEventListener('click', () => openCategoryModal());
    closeCategoryModal.addEventListener('click', () => closeCategoryModalFunc());
    cancelCategoryBtn.addEventListener('click', () => closeCategoryModalFunc());
    
    categoryModal.addEventListener('click', (e) => {
        if (e.target === categoryModal) closeCategoryModalFunc();
    });

    categoryForm.addEventListener('submit', handleCategoryFormSubmit);
}

function setupIconSelection() {
    const iconBtns = document.querySelectorAll('.cat-icon-btn');
    iconBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            iconBtns.forEach(b => {
                b.classList.remove('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
                b.classList.add('border-gray-300', 'dark:border-gray-600');
            });
            
            this.classList.remove('border-gray-300', 'dark:border-gray-600');
            this.classList.add('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
            
            selectedIcon = this.dataset.icon;
            document.getElementById('categoryIcon').value = selectedIcon;
        });
    });
}

function setupFilters() {
    searchCategory.addEventListener('input', filterCategories);
    statusFilter.addEventListener('change', filterCategories);
}

function filterCategories() {
    const search = searchCategory.value.toLowerCase();
    const status = statusFilter.value;

    filteredCategories = categories.filter(cat => {
        if (search && !cat.name.toLowerCase().includes(search)) return false;
        if (status === 'active' && !cat.active) return false;
        if (status === 'inactive' && cat.active) return false;
        return true;
    });

    renderCategories();
}

function openCategoryModal(category = null) {
    const modalTitle = document.getElementById('categoryModalTitle');
    const submitBtn = document.getElementById('submitCategoryBtn');
    
    if (category) {
        modalTitle.textContent = 'Modifier la catégorie';
        submitBtn.textContent = 'Mettre à jour';
        fillCategoryForm(category);
        currentEditingCategory = category;
    } else {
        modalTitle.textContent = 'Nouvelle catégorie';
        submitBtn.textContent = 'Enregistrer';
        categoryForm.reset();
        currentEditingCategory = null;
        selectedIcon = '-';
        
        // Réinitialiser sélections
        document.querySelectorAll('.cat-icon-btn').forEach(btn => {
            btn.classList.remove('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
            btn.classList.add('border-gray-300', 'dark:border-gray-600');
        });
    }
    
    categoryModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeCategoryModalFunc() {
    categoryModal.classList.add('hidden');
    document.body.style.overflow = 'auto';
    categoryForm.reset();
    currentEditingCategory = null;
}

function fillCategoryForm(category) {
    document.getElementById('categoryId').value = category.id;
    document.getElementById('categoryName').value = category.name;
    document.getElementById('categoryDescription').value = category.description;
    document.getElementById('categoryActive').checked = category.active;
    
    selectedIcon = category.icon;
    document.getElementById('categoryIcon').value = category.icon;
    
    // Sélectionner icône et couleur
    document.querySelectorAll('.cat-icon-btn').forEach(btn => {
        if (btn.dataset.icon === category.icon) {
            btn.classList.add('border-primary-500', 'bg-primary-50', 'dark:bg-primary-900/20');
        }
    });
    
}
function escapeHTML(str) {
    if (!str) return '';
    return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}
async function handleCategoryFormSubmit(e) {
    e.preventDefault();

    const formData = new FormData(categoryForm);
    const categoryData = {
        id: currentEditingCategory ? currentEditingCategory.id : undefined,
        name: escapeHTML(formData.get('name')),
        icon: escapeHTML(selectedIcon),
        description: escapeHTML(formData.get('description') || ''),
        active: formData.has('active'),
        custom: true,
        transaction_count: currentEditingCategory ? currentEditingCategory.transaction_count: 0,
    };

    if (!validateCategory(categoryData)) return;

    try {
        let response;
        if (currentEditingCategory) {
            // Modifier catégorie
            response = await fetch(`/categories/${currentEditingCategory.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(categoryData)
            });
        } else {
            // Ajouter nouvelle catégorie
            response = await fetch('/categories', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(categoryData)
            });
        }

        const result = await response.json();
        if (!response.ok) throw new Error(result.message || 'Erreur lors de la sauvegarde');

        // Mettre à jour le tableau local
        if (currentEditingCategory) {
            const index = categories.findIndex(c => c.id === currentEditingCategory.id);
            if (index > -1) categories[index] = { ...categories[index], ...categoryData, id: currentEditingCategory.id };
            showCategoryMessage('Catégorie modifiée avec succès !', 'success');
        } else {
            console.log(categoryData,result.id )
            categories.push({ ...categoryData, id: result.id });
            console.log(categories)
            showCategoryMessage('Catégorie créée avec succès !', 'success');
        }

        filterCategories();
        updateStats();
        closeCategoryModalFunc();
    } catch (error) {
        showCategoryMessage(error.message, 'error');
    }
}

function validateCategory(category) {
    if (!category.name.trim()) {
        showCategoryMessage('Le nom est obligatoire', 'error');
        return false;
    }
    
    // Vérifier les doublons
    const existing = categories.find(c => 
        c.name.toLowerCase() === category.name.toLowerCase() && 
        c.id !== category.id
    );
    
    if (existing) {
        showCategoryMessage('Une catégorie avec ce nom existe déjà', 'error');
        return false;
    }
    
    return true;
}

function renderCategories() {
    categoriesTableBody.innerHTML = '';
    console.log(filteredCategories)

    if (filteredCategories.length === 0) {
        categoriesTableBody.innerHTML = `
            <tr>
                <td colspan="6" class="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
                    Aucune catégorie trouvée
                </td>
            </tr>
        `;
        return;
    }

    filteredCategories.forEach(category => {
        const row = createCategoryRow(category);
        categoriesTableBody.appendChild(row);
    });
}

function createCategoryRow(category) {
    const tr = document.createElement('tr');
    tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700';
    
    const statusBadge = category.active
        ? '<span class="px-2 py-1 text-xs bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full">Actif</span>'
        : '<span class="px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">Inactif</span>';
    
    tr.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
                <span class="text-2xl mr-3">${category.icon}</span>
                <div>
                    <div class="text-sm font-medium text-gray-900 dark:text-gray-100">${category.name}</div>
                    <div class="text-xs text-gray-600 dark:text-gray-400">${category.description || 'Aucune description'}</div>
                </div>
            </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
            ${category.transaction_count}
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
            ${statusBadge}
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <button  onclick="editCategory('${escapeHTML(category.id)}')" class="text-primary-600 dark:text-primary-400 hover:text-primary-900 dark:hover:text-primary-300 mr-3">
                <i class="fas fa-edit"></i>
            </button>
            <button onclick="deleteCategory('${escapeHTML(category.id)}')" class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300">
                <i class="fas fa-trash"></i>
            </button>
        </td>
    `;
    
    return tr;
}

function editCategory(id) {
    const category = categories.find(c => c.id === id);
    if (category) {
        openCategoryModal(category);
    }
}

async function deleteCategory(id) {
    const category = categories.find(c => c.id === id);
    
    if (category.transaction_count > 0) {
        if (!confirm(`Cette catégorie contient ${category.transaction_count} transaction(s). Êtes-vous sûr de vouloir la supprimer ? Les transactions seront déplacées vers "Autres".`)) {
            return;
        }
    }
    
     try {
        const response = await fetch(`/categories/${id}`, {
            method: 'DELETE'
        });
        const result = await response.json();
        if (!response.ok) throw new Error(result.message || 'Erreur lors de la suppression');

        // Supprimer du tableau local
        const index = categories.findIndex(c => c.id === id);
        if (index > -1) categories.splice(index, 1);

        filterCategories();
        updateStats();
        showCategoryMessage('Catégorie supprimée avec succès !', 'success');
    } catch (error) {
        showCategoryMessage(error.message, 'error');
    }
}

function updateStats() {
    const total = categories.length;
    const active = categories.filter(c => c.active).length;
    const custom = categories.filter(c => c.custom).length;
    
    document.getElementById('totalCategories').textContent = total;
    document.getElementById('activeCategories').textContent = active;
    document.getElementById('customCategories').textContent = custom;
}

function showCategoryMessage(message, type) {
    const existingMessages = document.querySelectorAll('.category-message-alert');
    existingMessages.forEach(msg => msg.remove());
    
    const alertDiv = document.createElement('div');
    alertDiv.className = `category-message-alert fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
        type === 'success' 
            ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200' 
            : 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200'
    }`;
    
    alertDiv.innerHTML = `
        <div class="flex items-center">
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-3"></i>
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-current opacity-70 hover:opacity-100">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    document.body.appendChild(alertDiv);
    
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// Rendre les fonctions globales
window.editCategory = editCategory;
window.deleteCategory = deleteCategory;
</script>